sort algorithm
1.)Пузырьковая Сортировка -bubble sort;

   ascending and descending sorting

int sort_arr(int arr[], int n, int fl){
   int tmp = 0,j=0,i=0;
    if(fl==0)
  {
     for ( i = 0; i < n-1; i ++ )
     {
      for ( j = n-2; j >= i; j -- )
       {
         if ( arr[j] > arr[j+1] )
         {
             tmp = arr[j]; 
             arr[j] = arr[j+1];
             arr[j+1] = tmp;
         }
        
       }
       
     }
         
  }
  else
  {
      for ( i = 0; i < n-1; i ++ )
     {
      for ( j = n-2; j >= i; j -- )
       {
         if ( arr[j] < arr[j+1] )
         {
             tmp = arr[j]; 
             arr[j] = arr[j+1];
             arr[j+1] = tmp;
         }
        
       }
       
          
         
     }
  }
}
/*------------------------------------*/
2) IZI sorts -  ascending and descending sorting;

void print_arr(int arr[],int n)
{
    int i=0;
    for(i = 0; i< n; i++)
  {
      printf("%d ",arr[i]);
  }
}
void swap(int arr[],int i,int j)
{
        int tmp;
         tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
}
int find_min(int arr[], int start_index, int length_arr)
{
    int j = 0, min = 9999,min_index = -1;
     for(j = start_index; j < length_arr; j++)
       {
           if(arr[j] < min)
           {
               min = arr[j];
               min_index = j;
           }
        }
        return min_index;
       
}
int find_max(int arr[], int start_index, int length_arr)
{
    int j = 0, max = -9999, max_index = -1;
     for(j = start_index; j < length_arr; j++)
       {
           if(arr[j] > max)
           {
               max = arr[j];
               max_index = j;
           }
        }
        return max_index;
       
}
 int sort_arr(int arr[], int n, int fl)
 {
     int i = 0, min_index = -1, max_index = -1;
     if(fl == 0)
     {
          for(i = 0; i < n; i++)
          {
            min_index = find_min(arr, i, n);
            swap(arr,min_index,i);
          } 
          
     }
     else
     {
          for(i = 0; i < n; i++)
          {
            max_index = find_max(arr, i, n);
            swap(arr, max_index, i);
          }  
          
     }
 }
 /*-----------------------------*/
 
 3) finds the position of the first occurrence of an element
 
 int linear_search(int arr[], int n, int arg){

  int i = 0;
   for(i = 0; i < n;i++)
   {
      
       if(arr[i]==arg)
       {
           
           return i;
           
       }
   }
    return -1;

}
4) функция обмена - sharing function

   void swap( int *mas, int previous, int current )
   {
      int temp = 0;
      temp = mas[current];
      mas[current] = mas[previous];
      mas[previous] = temp;
   }
   
5) /*---------сортировка гребнем - comb sorting-----------------*/

   void CombSort(int *mass, int n)
   {
     double factor = 1.2473;
     int i = 0, delta = n, swapped = 1;
     
     while (delta > 1 || swapped)
     {
       if (delta > 1)
	   {
	     delta = (int)(delta / factor);
	   }
	  swapped = 0;
	for (i = 0; i + delta < n; i++)
	{
      if (mass[i] > mass[i + delta])
	  {
	    swap(mass, i, i + delta);
        swapped = 1;
	  }
	}
  }
  }
    
6)  /* Cортировка выбором- sort by selection */
void SelectionSort( int *mass, int n )
{
  int i = 0, j = 0, key = 0, min = 0;
  
  if( n > 1 )
  {
  for( i = 0; i < n - 1; i++ )
  {
    min = mass[i];
	key = i;
    for( j = i + 1; j < n; j++ )
	{
	  if( mass[j] < min )
	  {
	    key = j;
		min = mass[j];
	  }
	}
	if( key != i )
	{
	  mass[key] = mass[i];
	  mass[i] = min;
	}
   }
 }
}

7) /*----------------------Cортировка шейкера-----------*/

void ShakerSort( int *mas, int n )      1)Создаем две переменные left and right 
{                                          пока left <= right
  int left = 0, right = n - 1, i = 0;     бежим по циклу от right до i > left и уменьшаем i на 1
                                            если mas i-1 > i  то свапаем местами элементы
                                            увеличиваем left на 1 
                                            и наоборот 
  while ( left <= right)                   бежим по циклу от left до i <= right и увеличиваем i на 1
                                               если mas i-1 > i  то свапаем местами элементы
  {
    for ( i = right; i > left; i-- )
	  {
      if( mas[i-1] > mas[i] )
	    {  
		    swap( mas, i - 1, i );
	    }
	  }
    left++;
   for (i = left; i <= right; i++ )
   {
     if( mas[i-1] > mas[i] ) 
	   {
	     swap( mas, i - 1, i );
	   }
   }
   right--
    }
}

8) /*---------Shell sort--------*/

   void ShellSort(int *mas, int n ) 
{
  int i = 0, j = 0, tmp = 0, d = n/2;  
  
  while ( d > 0)                              работаем пока d > 0
                                              бежим в цикле до n-d;
  {                                           j = 1;
    for ( i = 0; i < n - d ; i++)             while ( ( j >= 0 ) && ( mas[ j ] > mas[ j + d ] ) )
                                                свапаем элементы местами по ростоянию d от друг друга
                                                уменьшаем j--;
                                                b=и сного находим растояния от элементов
    {
     j = i;
     while ( ( j >= 0 ) && ( mas[ j ] > mas[ j + d ] ) )
     {
       tmp = mas[ j ];
       mas[ j ] = mas[ j + d ];
       mas[ j + d ] = tmp;
       j--;
     }
	  }
    d = d/2;
  }
}
/*---------------------*/

9) /*---------Сортировка вставками-----------*/

void InsertSort(int *mas, int n) 
{
  int i = 0, j = 0; 
  for (i = 1; i < n; i++)
  {
    for (j = i; j > 0 && mas[j-1] > mas[j]; j--)
    {
      swap(mas, j - 1, j);
    } 
  }
}

/*----------------------------------------------*/

10)
/* Быстрая сортировка */
void QuickSort2(int *mas, int first, int last)
{ 
  int f=first, l=last;
  int mid = mas[(f + l) / 2];
  do
  {
    while (mas[f] < mid) f++;
    while (mas[l] > mid) l--;
    if (f <= l) //перестановка элементов
    {
      swap(mas, f, l);
      f++;
      l--;
    }
  } while (f < l);
  if (first < l) 
  {
	QuickSort2(mas, first, l);
  }
  if (f < last)
  {
	QuickSort2(mas, f, last);
  }
}

void QuickSort(int *mas, int n)
{
  QuickSort2(mas, 0, n - 1);
}
11)
     /*---Бинарный поиск-----*/
int binarysearch(int a, int mass[], int n)
{
    int low, high, middle;
    low = 0;
    high = n - 1;
    while (low <= high)
    {
        middle = (low + high) / 2;
        if (a < mass[middle])
            high = middle - 1;
        else if (a > mass[middle])
            low = middle + 1;
        else 
            return middle;
    }
    return -1;
}